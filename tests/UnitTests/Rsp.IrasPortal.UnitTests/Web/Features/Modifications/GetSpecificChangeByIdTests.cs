using System.Text.Json;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Rsp.IrasPortal.Application.Constants;
using Rsp.IrasPortal.Application.DTOs;
using Rsp.IrasPortal.Application.DTOs.CmsQuestionset.Modifications;
using Rsp.IrasPortal.Application.DTOs.Responses;
using Rsp.IrasPortal.Web.Features.Modifications;

namespace Rsp.IrasPortal.UnitTests.Web.Features.Modifications;

public class GetSpecificChangeByIdTests : TestServiceBase<ModificationsController>
{
    public GetSpecificChangeByIdTests()
    {
        var ctx = new DefaultHttpContext();
        Sut.ControllerContext = new ControllerContext { HttpContext = ctx };
        Sut.TempData = new TempDataDictionary(ctx, Mock.Of<ITempDataProvider>());
    }

    [Fact]
    public void GetSpecificChangesByAreaId_Should_Return_BadRequest_When_No_TempData()
    {
        // Act
        var result = Sut.GetSpecificChangesByAreaId("A1");

        // Assert
        result.ShouldBeOfType<BadRequestObjectResult>();
    }

    [Fact]
    public void GetSpecificChangesByAreaId_Should_Return_Empty_List_When_Area_Not_Found()
    {
        // Arrange
        var areas = new List<AreaOfChangeDto>
        {
            new() { AutoGeneratedId = "A1", OptionName = "Area 1", SpecificAreasOfChange = [] }
        };
        Sut.TempData[TempDataKeys.ProjectModification.AreaOfChanges] = JsonSerializer.Serialize(areas);

        // Act
        var result = Sut.GetSpecificChangesByAreaId("A2") as JsonResult;

        // Assert
        result.ShouldNotBeNull();
        var list = result.Value.ShouldBeOfType<List<SelectListItem>>();
        list.Count.ShouldBe(1); // only the default item
    }

    [Fact]
    public void GetSpecificChangesByAreaId_Should_Return_SpecificChanges()
    {
        // Arrange
        var areas = new List<AreaOfChangeDto>
        {
            new()
            {
                AutoGeneratedId = "A1",
                OptionName = "Area 1",
                SpecificAreasOfChange =
                [
                    new() { AutoGeneratedId = "S1", OptionName = "Spec 1" },
                    new() { AutoGeneratedId = "S2", OptionName = "Spec 2" }
                ]
            }
        };
        Sut.TempData[TempDataKeys.ProjectModification.AreaOfChanges] = JsonSerializer.Serialize(areas);

        // Act
        var result = Sut.GetSpecificChangesByAreaId("A1") as JsonResult;

        // Assert
        result.ShouldNotBeNull();
        var list = result.Value.ShouldBeOfType<List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>>();
        list.Count.ShouldBe(3); // default + 2
        list[1].Value.ShouldBe("S1");
        list[2].Value.ShouldBe("S2");
    }

    [Fact]
    public void GetSpecificChangesByAreaId_ReturnsSpecificChanges_WhenValidAreaOfChangeId()
    {
        // Arrange
        var modificationResponse = new List<GetAreaOfChangesResponse>
        {
            new() {
                Id = "1",
                Name = "Test Area of Change",
                ModificationSpecificAreaOfChanges =
                [
                    new ModificationSpecificAreaOfChangeDto
                    {
                        Id = "1",
                        Name = "Specific Area 1",
                        JourneyType = "specific area 1",
                        ModificationAreaOfChangeId = 1
                    },
                    new ModificationSpecificAreaOfChangeDto
                    {
                        Id = "2",
                        Name = "Specific Area 2",
                        JourneyType = "specific area 2",
                        ModificationAreaOfChangeId = 1
                    }
                ]
            }
        };

        Sut.TempData = new TempDataDictionary(new DefaultHttpContext(), Mock.Of<ITempDataProvider>())
        {
            [TempDataKeys.ProjectModification.AreaOfChanges] = JsonSerializer.Serialize(modificationResponse)
        };

        // Act
        var result = Sut.GetSpecificChangesByAreaId("1");

        // Assert
        var jsonResult = result.ShouldBeOfType<JsonResult>();
        var selectList = jsonResult.Value.ShouldBeOfType<List<SelectListItem>>();

        selectList.Count.ShouldBe(1);
        selectList[0].Text.ShouldBe("Select specific change");
    }

    [Fact]
    public void GetSpecificChangesByAreaId_ReturnsBadRequest_WhenSessionIsMissing()
    {
        // Arrange
        Sut.TempData = new TempDataDictionary(new DefaultHttpContext(), Mock.Of<ITempDataProvider>());

        // Act
        var result = Sut.GetSpecificChangesByAreaId("123");

        // Assert
        var badRequest = result.ShouldBeOfType<BadRequestObjectResult>();
        badRequest.Value.ShouldBe("Area of changes not available.");
    }
}