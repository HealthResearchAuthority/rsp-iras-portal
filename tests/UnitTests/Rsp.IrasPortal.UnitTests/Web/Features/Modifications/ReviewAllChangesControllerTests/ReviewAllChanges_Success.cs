using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Rsp.IrasPortal.Application.DTOs.CmsQuestionset;
using Rsp.IrasPortal.Application.DTOs.CmsQuestionset.Modifications;
using Rsp.IrasPortal.Application.DTOs.Requests;
using Rsp.IrasPortal.Application.DTOs.Responses;
using Rsp.IrasPortal.Application.Responses;
using Rsp.IrasPortal.Application.Services;
using Rsp.IrasPortal.Web.Features.Modifications;
using Rsp.IrasPortal.Web.Features.Modifications.Models;

namespace Rsp.IrasPortal.UnitTests.Web.Features.Modifications.ReviewAllChangesControllerTests;

public class ReviewAllChanges_Success : TestServiceBase<ReviewAllChangesController>
{
    [Fact]
    public async Task Returns_View_With_Changes_And_SponsorDetails()
    {
        // Arrange
        var http = new DefaultHttpContext();
        Sut.ControllerContext = new() { HttpContext = http };
        Sut.TempData = new TempDataDictionary(http, Mock.Of<ITempDataProvider>());

        var modId = Guid.NewGuid();
        var changeId = Guid.NewGuid();

        // modifications
        Mocker
            .GetMock<IProjectModificationsService>()
            .Setup(s => s.GetModificationsByIds(It.IsAny<List<string>>()))
            .ReturnsAsync(new ServiceResponse<GetModificationsResponse>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new() { Modifications = [new Application.DTOs.ModificationsDto { Id = modId.ToString(), ModificationId = modId.ToString(), Status = "Draft" }] }
            });

        // changes
        Mocker
            .GetMock<IProjectModificationsService>()
            .Setup(s => s.GetModificationChanges(modId))
            .ReturnsAsync(new ServiceResponse<IEnumerable<ProjectModificationChangeResponse>>
            {
                StatusCode = HttpStatusCode.OK,
                Content = [new() { Id = changeId, AreaOfChange = "A1", SpecificAreaOfChange = "SA1", Status = "Draft" }]
            });

        // initial questions
        Mocker
            .GetMock<ICmsQuestionsetService>()
            .Setup(s => s.GetInitialModificationQuestions())
            .ReturnsAsync(new ServiceResponse<StartingQuestionsDto>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StartingQuestionsDto
                {
                    AreasOfChange = [new() { AutoGeneratedId = "A1", OptionName = "Area Name", SpecificAreasOfChange = [new() { AutoGeneratedId = "SA1", OptionName = "Specific Name" }] }]
                }
            });

        // change journey and answers
        Mocker
            .GetMock<ICmsQuestionsetService>()
            .Setup(s => s.GetModificationsJourney("SA1"))
            .ReturnsAsync(new ServiceResponse<CmsQuestionSetResponse>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new CmsQuestionSetResponse { Sections = [new() { Id = "S1", CategoryId = "C1", Questions = [new QuestionModel { Id = "Q1", QuestionId = "Q1", Name = "Q1", CategoryId = "C1", AnswerDataType = "Text" }] }] }
            });

        Mocker
            .GetMock<IRespondentService>()
            .Setup(s => s.GetModificationChangeAnswers(changeId, It.IsAny<string>()))
            .ReturnsAsync(new ServiceResponse<IEnumerable<RespondentAnswerDto>> { StatusCode = HttpStatusCode.OK, Content = [] });

        // sponsor details question set and answers
        Mocker
            .GetMock<ICmsQuestionsetService>()
            .Setup(s => s.GetModificationQuestionSet("pm-sponsor-reference", null))
            .ReturnsAsync(new ServiceResponse<CmsQuestionSetResponse>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new CmsQuestionSetResponse { Sections = [new() { Id = "S2", CategoryId = "SCAT", Questions = [new QuestionModel { Id = "SQ1", QuestionId = "SQ1", Name = "SQ1", CategoryId = "SCAT", AnswerDataType = "Text" }] }] }
            });

        Mocker
            .GetMock<IRespondentService>()
            .Setup(s => s.GetModificationAnswers(modId, It.IsAny<string>()))
            .ReturnsAsync(new ServiceResponse<IEnumerable<RespondentAnswerDto>> { StatusCode = HttpStatusCode.OK, Content = [] });

        // Act
        var result = await Sut.ReviewAllChanges("PR1", "IRAS", "Short", modId);

        // Assert
        var view = result.ShouldBeOfType<ViewResult>();
        var model = view.Model.ShouldBeOfType<ModificationDetailsViewModel>();
        model.ModificationChanges.Count.ShouldBe(1);
        model.SponsorDetails.Count.ShouldBeGreaterThan(0);
        model.ModificationChanges[0].AreaOfChangeName.ShouldBe("Area Name");
        model.ModificationChanges[0].SpecificChangeName.ShouldBe("Specific Name");
    }
}