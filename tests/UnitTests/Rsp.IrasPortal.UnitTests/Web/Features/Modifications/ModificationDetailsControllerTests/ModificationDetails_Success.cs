using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Rsp.IrasPortal.Application.DTOs.CmsQuestionset;
using Rsp.IrasPortal.Application.DTOs.CmsQuestionset.Modifications;
using Rsp.IrasPortal.Application.DTOs.Requests;
using Rsp.IrasPortal.Application.Responses;
using Rsp.IrasPortal.Application.Services;
using Rsp.IrasPortal.Web.Features.Modifications;
using Rsp.IrasPortal.Web.Features.Modifications.Models;
using Rsp.IrasPortal.Web.Models;

namespace Rsp.IrasPortal.UnitTests.Web.Features.Modifications.ModificationDetailsControllerTests;

public class ModificationDetails_Success : TestServiceBase<ModificationDetailsController>
{
    [Fact]
    public async Task Returns_View_With_Mapped_Changes_And_Flags()
    {
        // Arrange
        var http = new DefaultHttpContext();
        Sut.ControllerContext = new() { HttpContext = http };
        Sut.TempData = new TempDataDictionary(http, Mock.Of<ITempDataProvider>());

        var modId = Guid.NewGuid();
        var changeId = Guid.NewGuid();

        // 1. GetModificationsByIds -> one modification entry
        Mocker.GetMock<IProjectModificationsService>()
            .Setup(s => s.GetModificationsByIds(It.IsAny<List<string>>()))
            .ReturnsAsync(new ServiceResponse<Rsp.IrasPortal.Application.DTOs.Responses.GetModificationsResponse>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new()
                {
                    Modifications = [new Rsp.IrasPortal.Application.DTOs.ModificationsDto { Id = modId.ToString(), ModificationId = modId.ToString(), Status = "Draft" }]
                }
            });

        // 2. GetModificationChanges -> one change
        Mocker.GetMock<IProjectModificationsService>()
            .Setup(s => s.GetModificationChanges(modId))
            .ReturnsAsync(new ServiceResponse<IEnumerable<Rsp.IrasPortal.Application.DTOs.Responses.ProjectModificationChangeResponse>>
            {
                StatusCode = HttpStatusCode.OK,
                Content = [new() { Id = changeId, SpecificAreaOfChange = "SA1", AreaOfChange = "A1", Status = "Draft" }]
            });

        // 3. GetInitialModificationQuestions -> resolve names
        Mocker.GetMock<ICmsQuestionsetService>()
            .Setup(s => s.GetInitialModificationQuestions())
            .ReturnsAsync(new ServiceResponse<StartingQuestionsDto>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new StartingQuestionsDto
                {
                    AreasOfChange =
                    [
                        new()
                        {
                            AutoGeneratedId = "A1",
                            OptionName = "Area Name",
                            SpecificAreasOfChange = [ new() { AutoGeneratedId = "SA1", OptionName = "Specific Name" } ]
                        }
                    ]
                }
            });

        // 4. For UpdateModificationChanges flow we need journey questions and answers per change call; set validator minimal
        Mocker.GetMock<ICmsQuestionsetService>()
            .Setup(s => s.GetModificationsJourney("SA1"))
            .ReturnsAsync(new ServiceResponse<CmsQuestionSetResponse>
            {
                StatusCode = HttpStatusCode.OK,
                Content = new CmsQuestionSetResponse
                {
                    Sections = [new SectionModel { Id = "S1", CategoryId = "C1", Questions = [new QuestionModel { Id = "Q1", QuestionId = "Q1", Name = "Q1", AnswerDataType = "Text", CategoryId = "C1", Conformance = "Mandatory" }] }]
                }
            });

        Mocker.GetMock<IRespondentService>()
            .Setup(s => s.GetModificationChangeAnswers(changeId, It.IsAny<string>()))
            .ReturnsAsync(new ServiceResponse<IEnumerable<RespondentAnswerDto>> { StatusCode = HttpStatusCode.OK, Content = [] });

        // Use a permissive validator that sets IsValid true
        Mocker.GetMock<FluentValidation.IValidator<QuestionnaireViewModel>>()
            .Setup(v => v.ValidateAsync(It.IsAny<FluentValidation.ValidationContext<QuestionnaireViewModel>>(), default))
            .ReturnsAsync(new FluentValidation.Results.ValidationResult());

        // Act
        var result = await Sut.ModificationDetails("PR1", "IRAS", "Short", modId);

        // Assert
        var view = result.ShouldBeOfType<ViewResult>();
        var model = view.Model.ShouldBeOfType<ModificationDetailsViewModel>();

        model.ModificationId.ShouldBe(modId.ToString());
        model.ModificationChanges.Count.ShouldBe(1);
        model.ModificationChanges[0].AreaOfChangeName.ShouldBe("Area Name");
        model.ModificationChanges[0].SpecificChangeName.ShouldBe("Specific Name");
    }
}