@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.AspNetCore.Http.Extensions
@using Rsp.Gds.Component.Models
@using Rsp.IrasPortal.Application.Constants
@using Rsp.IrasPortal.Application.DTOs.Responses
@using Rsp.IrasPortal.Web.Extensions
@inject IHttpContextAccessor httpContextAccessor
@model QuestionnaireViewModel

@{
    var index = (int)ViewBag.Index;
    var question = Model.Questions[index];
    var errorKey = $"Questions[{index}].AnswerText";
    var fieldHasErrors = ViewData.ModelState[errorKey]?.ValidationState == ModelValidationState.Invalid;

    var rules = question.Rules;
    var conditional = !question.IsMandatory && rules.Count > 0;
    var parents = conditional ? string.Join(',', rules.Select(rule => rule.ParentQuestionId)) : "";
    var questionId = conditional ? question.QuestionId : "";

    var hintContent = rules.Any()
        ? string.Join("", rules.Select(rule => $"<p>{rule.Description}</p>"))
        : null;

    // this url will be used to redirect, when search button is clicked
    var requestUrl = httpContextAccessor.HttpContext?.Request.GetEncodedUrl();

    // get the routeData to get the action name
    var routeData = httpContextAccessor.HttpContext?.GetRouteData();

    // only store if the the action is DisplayQuestionnaire, if there are validation errors
    // on the page this url will be used to post back when searching again for the organisation
    if (string.Equals(routeData?.Values["action"]?.ToString(), "DisplayQuestionnaire", StringComparison.OrdinalIgnoreCase))
    {
        TempData[TempDataKeys.OrgSearchReturnUrl] = requestUrl;
    }
}

@* This value of this input box will be submitted when javascript is enabled
    or when javascript is disabled but the value was previously selected
    by the user*@
<input id="@(question.QuestionId)_Text"
       type="text"
       asp-for="Questions[index].AnswerText"
       error-class-for="Questions[index].AnswerText"
       class="govuk-input" hidden />

<input id="auto_search"
       name="autoSearchEnabled"
       type="text"
       value="false" hidden />

@{
    string? searchText;

    // check if the search was performed
    TempData.TryGetValue(TempDataKeys.SponsorOrgSearched, out var sponsorOrgSearched);
    TempData.TryGetValue(TempDataKeys.OrgSearch, out OrganisationSearchViewModel? orgSearch, true);

    if (sponsorOrgSearched is "searched:true")
    {
        searchText = string.IsNullOrWhiteSpace(orgSearch?.SearchText) ? string.Empty : orgSearch.SearchText;

        // Store the fact that the search was performed in a hidden input
        // This will be used to determine if the search was performed but no selection was made
        // when the form is submitted
        <input id="sponsor_org_search_performed"
               type="text"
               name="searchedPerformed"
               value="@sponsorOrgSearched" hidden />
    }

    // user made the selection, show that selection. This will
    // work if there are validation errors on the page
    if (!string.IsNullOrWhiteSpace(orgSearch?.SelectedOrganisation))
    {
        searchText = orgSearch.SelectedOrganisation;
    }
    else
    {
        bool searchFieldHasError = ViewData.ModelState["sponsor_org_search"]?.ValidationState == ModelValidationState.Invalid;

        // if the search field has errors, retain the text if not empty
        if (searchFieldHasError)
        {
            searchText = string.IsNullOrWhiteSpace(orgSearch?.SearchText) ?
                string.Empty :
                orgSearch.SearchText;
        }
        else
        {
            // if no errors, retain the search text if provided, otherwise
            // use the value from the previously selected answer
            searchText = string.IsNullOrWhiteSpace(orgSearch?.SearchText) ?
                Model.Questions[index].AnswerText :
                orgSearch.SearchText;
        }
    }

    // if organisation was not searched, use the previously saved answer
    // add a hidden input to submit
    if (sponsorOrgSearched is not "searched:true" && !string.IsNullOrWhiteSpace(Model.Questions[index].AnswerText))
    {
        <input type="hidden" name="SponsorOrgSearch.SelectedOrganisation" value="@Model.Questions[index].AnswerText" />
    }

    <div class="govuk-form-group" error-class-property="sponsor_org_search">
        @* The following label will be hidden by javascript if enabled, this label will be used for non-js version *@
        <label class="govuk-label" for="sponsor_org_search" aria-described-for="Questions[index].QuestionText">
            @question.QuestionText
        </label>

        @Html.ValidationMessage("sponsor_org_search", new { @class = "govuk-error-message" })

        <div class="sponsor-org-search">
            <input id="sponsor_org_search"
                   type="text"
                   name="SponsorOrgSearch.SearchText"
                   class="govuk-input govuk-!-width-three-quarters"
                   value="@searchText"
                   error-class-property="sponsor_org_search" />

            @{
                ViewBag.Style = "govuk-button govuk-button--secondary";
            }

            <partial name="_SubmitButton" model="@("qnc:searchorganisations", "Search", new Dictionary<string, string>())" />
        </div>
    </div>

    <div class="govuk-form-group">
        @if (!string.IsNullOrWhiteSpace(searchText))
        {
            // Try to retrieve the organisation search response from TempData
            TempData.TryGetValue<OrganisationSearchResponse>(TempDataKeys.SponsorOrganisations, out var response, true);

            // If there are organisations in the response, display them
            @if (response?.Organisations is not null)
            {
                var organisations = response.Organisations;

                // If no organisations found, show a message
                if (!organisations.Any())
                {
                    <div class="govuk-inset-text">
                        No suggestions found for <strong>@searchText</strong>
                    </div>
                }

                // If organisations are found, display them as radio options
                if (organisations.Any())
                {
                    // Escape the search text for use in Regex replacement to display the matched text in bold
                    //var escapedSearch = string.IsNullOrWhiteSpace(searchText!.ToString()) ? searchText : Regex.Escape(Model.Questions[index].AnswerText!);
                    var escapedSearch = Regex.Escape(searchText);

                    <rsp-gds-radio-group asp-for="SponsorOrgSearch.SelectedOrganisation"
                                         label-css-class="govuk-hint"
                                         label-text=""
                                         options="@(organisations.Select(org => new GdsOption { Value = Html.Encode(org.Name), Label = Regex.Replace(org.Name, escapedSearch, match => $"<b>{match.Value}</b>", RegexOptions.IgnoreCase) }))"
                                         div-inline-class="govuk-radios"
                                         hint-html="Results for '@searchText'">
                    </rsp-gds-radio-group>

                    // If there are more than 5 results, prompt the user to narrow their search
                    if (response.TotalCount > 5)
                    {
                        <div class="govuk-inset-text">
                            @response.TotalCount sponsor organisations match your search for '@searchText'. Try narrowing down your search if the organisation you are looking for is not listed
                        </div>
                    }
                }
            }
        }
    </div>
}