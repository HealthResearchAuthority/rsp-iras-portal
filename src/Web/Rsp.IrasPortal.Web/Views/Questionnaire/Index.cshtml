@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.FeatureManagement
@using Rsp.IrasPortal.Application.Constants
@using Rsp.IrasPortal.Application.DTOs
@using Rsp.IrasPortal.Web.TagHelpers
@using System.Globalization
@model QuestionnaireViewModel
@inject IFeatureManager featureManager

@{
    (string routeName, string linkText, Dictionary<string, string> routeValues)? navModel = null;
    var previousStage = TempData[TempDataKeys.PreviousStage] as string;
    var previousCategory = TempData[TempDataKeys.PreviousCategory] as string;
    var currentStage = TempData[TempDataKeys.CurrentStage] as string;
    var errorSummaryTitle = "There is a problem";
    var projectRecordId = TempData.Peek(TempDataKeys.ProjectRecordId) as string;
    var projectOverview = TempData[TempDataKeys.ProjectOverview] as bool? ?? false;

    var IrasId = TempData.Peek(TempDataKeys.IrasId)?.ToString();
    var shortProjectTitle = TempData.Peek(TempDataKeys.ShortProjectTitle) as string;
    var modificationId = TempData.Peek(TempDataKeys.ProjectModification.ProjectModificationIdentifier) as string;
    var specificArea = TempData.Peek(TempDataKeys.ProjectModification.ProjectModificationSpecificArea) as string;

    Model.CurrentStage = currentStage!;    
}

@{
    var prefix = ViewData.ModelState.IsValid ? "" : "Error - ";
    if (specificArea != null)
    {
        ViewBag.Title = $"{prefix}{specificArea} - Make changes to research";
    }
    else
    {
        ViewBag.Title = $"{prefix}{Model.Questions.FirstOrDefault()?.Section} - Make changes to research";
    }
}


@if (await featureManager.IsEnabledAsync(Features.ProgressiveEnhancement))
{
    <script src="~/lib/jquery/dist/jquery.js"></script>

    // Collect all rules for conditional questions
    var conditionalRules = Model.GetConditionalRules();

    <script>
		$(document).ready(function () {
		const conditionalRules = @Html.Raw(JsonSerializer.Serialize(conditionalRules));

		// Loop through each rule and store it individually by QuestionId
		conditionalRules.forEach(rule => {
		sessionStorage.setItem(rule.QuestionId, JSON.stringify(rule.Rules));
		});
		});
    </script>

    <script src="~/js/questionnaire.js"></script>
    <script src="~/js/rules.js"></script>
}

@{
    if (Model.ReviewAnswers)
    {
        navModel = ("qnc:submitapplication", "Back", new()
{
            { "projectRecordId", projectRecordId }
        });
    }
    else if (!string.IsNullOrEmpty(previousStage))
    {
        // If there is a previous stage, navigate to that stage in the questionnaire
        navModel = ("qnc:displayquestionnaire", "Back", new()
{
            { "categoryId", previousCategory },
            { "sectionId", previousStage }
                                                                                                                                                                                                                                            });
    }
    else if (projectOverview)
    {
        // If the project overview is true, navigate to the project overview page
        navModel = ("app:projectoverview", "Back", new());
    }
}

@if (navModel != null)
{
    @* @section is added for the back button, so that we can render something below the back button
        and before the RenderBody() in the _Layout.cshtml. As RenderBody() renders anything that is not within
        the named section *@
    @section BackNavigation {
        <partial name="_BackNavigation" model="navModel.Value" />
    }
}
<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <form method="post">

            @if (ViewData[ViewDataKeys.IsQuestionnaireValid] is true)
            {
                <div class="govuk-panel govuk-panel--confirmation">
                    <div class="govuk-panel__body">
                        Validation Passed
                    </div>
                </div>
            }

            <div class="govuk-form-group">

                <input hidden asp-for="CurrentStage" value="@currentStage" />

                <govuk-fieldset class="sections">
                    <govuk-fieldset-legend class="govuk-fieldset__legend--l">
                        <h2 class="govuk-heading-l" id="title">
                            @if (specificArea != null)
                            {
                                @specificArea;
                            }
                            else
                            {
                                @(Model.Questions.FirstOrDefault()?.Section)
                            }
                        </h2>
                    </govuk-fieldset-legend>

                    @if (modificationId is not null)
                    {
                        <partial name="_ProjectModificationSummary" model="(IrasId, shortProjectTitle, modificationId)" />
                    }

                    <partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />

                    @foreach (var question in Model.Questions)
                    {
                        var index = question.Index;

                        <input type="hidden" asp-for="Questions[index].Index" />
                        <input type="hidden" asp-for="Questions[index].QuestionId" />
                        <input type="hidden" asp-for="Questions[index].Category" />
                        <input type="hidden" asp-for="Questions[index].SectionId" />
                        <input type="hidden" asp-for="Questions[index].Section" />
                        <input type="hidden" asp-for="Questions[index].Heading" />
                        <input type="hidden" asp-for="Questions[index].QuestionText" />
                        <input type="hidden" asp-for="Questions[index].ShortQuestionText" />
                        <input type="hidden" asp-for="Questions[index].QuestionType" />
                        <input type="hidden" asp-for="Questions[index].DataType" />
                        <input type="hidden" asp-for="Questions[index].IsMandatory" checked="@question.IsMandatory" />
                        <input type="hidden" asp-for="Questions[index].IsOptional" checked="@question.IsOptional" />

                        if (!question.IsMandatory)
                        {
                            if (question.Rules.Count == 0)
                            {
                                <div class="govuk-inset-text">
                                    This question is conditional:
                                </div>
                            }
                        }

                        var types = (question.QuestionType.ToLower(), question.DataType.ToLower());

                        ViewBag.Index = index;

                        // this will be used in the template
                        var templateName = types switch
                        {
                            ("date", "date") => "DateTemplate",
                            ("text", "text" or "email") => "TextTemplate",
                            ("look-up list", "checkbox") => "CheckboxTemplate",
                            ("look-up list", "radio button") => "RadioButtonTemplate",
                            ("boolean", "boolean") => "RadioButtonTemplate",
                            ("rts:org_lookup", "text") => modificationId == null ?
                                "AutoSuggestTemplate" :
                                "OrgSearchTemplate",
                            ("look-up list", "dropdown") => "DropdownTemplate",
                            _ => string.Empty
                        };

                        if (!string.IsNullOrWhiteSpace(templateName))
                        {
                            // plese note the @ is necessary before Html so that Template is rendered, otherwise it won't render
                            @Html.EditorForModel(templateName, ViewData);
                        }

                    }
                </govuk-fieldset>
            </div>

            <div class="save-buttons">
                @if (!Model.ReviewAnswers)
                {
                    <partial name="_SubmitButton" model="@("qnc:saveresponses", "Save and continue", new Dictionary<string, string> { { "saveAndContinue", bool.TrueString } })" />

                    ViewBag.Style = "govuk-button govuk-button--secondary";
                    <partial name="_SubmitButton" model="@("qnc:saveresponses", "Save for later", new Dictionary<string, string> { { "saveForLater", bool.TrueString } })" />
                }
                else
                {
                    <partial name="_SubmitButton" model="@("qnc:saveresponses", "Save changes", new Dictionary<string, string> { { "submit", bool.TrueString } })" />
                }
            </div>

            @if (modificationId is not null)
            {
                <div class="govuk-form-group">
                    <a href="#" class="govuk-link">Remove this change</a>
                </div>
            }
        </form>
    </div>
</div>