@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.FeatureManagement
@using Rsp.IrasPortal.Application.Constants
@using System.Globalization
@model QuestionnaireViewModel
@inject IFeatureManager featureManager
@{
	// Try to read the IRAS ID from TempData, default to 0 if missing
	int.TryParse(TempData[TempDataKeys.IrasId]?.ToString(), out int irasId);

	// Group questions by their Section and order them by Sequence
	var groupedSections = Model.Questions
		.GroupBy(q => q.Section)
		.OrderBy(g => g.First().Sequence)
		.ToList();

	// Get the key of the first section (e.g., for special handling like IRAS ID)
	var firstSectionKey = groupedSections.FirstOrDefault()?.Key;

	// Get the last question from the last section for back navigation
	var lastQuestion = groupedSections.LastOrDefault()?.FirstOrDefault();

	// Title used in the validation error summary
	var errorSummaryTitle = "There is a problem";

	// Prepare the navigation model depending on whether we have a lastQuestion
	var navModel = lastQuestion != null
		? ("qnc:displayquestionnaire", "Back", new Dictionary<string, string>
				{
			{ "sectionId", lastQuestion.SectionId },
			{ "categoryId", lastQuestion.Category }
				})
		: ("app:createapplication", "Back", new Dictionary<string, string>());
}

@if (await featureManager.IsEnabledAsync(Features.ProgressiveEnhancement))
{
	// If progressive enhancement is enabled, add jQuery and custom JavaScript
	<script src="~/lib/jquery/dist/jquery.js"></script>

	<script>
		$(document).ready(function () {
			// Serialize conditional rules and store them in sessionStorage
			const conditionalRules = @Html.Raw(JsonSerializer.Serialize(
				Model.Questions
					.Where(q => !q.IsMandatory && q.Rules.Any())
					.Select(q => new { q.QuestionId, q.Rules })
				));

			// Save each conditional rule by QuestionId
			conditionalRules.forEach(rule => {
				sessionStorage.setItem(rule.QuestionId, JSON.stringify(rule.Rules));
			});

			// Initially hide all elements with 'conditional' class
			$(".conditional").hide();

			// For each conditional div, check its parent hidden input value
			document.querySelectorAll('div.conditional').forEach(div => {
				const parentId = div.getAttribute('data-parents');
				const hiddenInput = document.getElementById(parentId);

				// If the hidden input value is "yes", unhide the conditional div
				if (hiddenInput?.value.trim().toLowerCase() === 'yes') {
					div.classList.remove('conditional');
					div.style.display = '';
				}
			});
		});
	</script>
}

@functions {
	// Get the correct ModelState key for the question based on its data type
	string GetModelKey(QuestionViewModel q) => q.DataType.ToLower() switch
	{
		"date" or "text" or "email" => $"Questions[{q.Index}].AnswerText",
		"checkbox" => $"Questions[{q.Index}].Answers",
		"radio button" or "boolean" or "look-up list" => $"Questions[{q.Index}].SelectedOption",
		_ => ""
	};

	// Determine what to display for the user's answer
	string GetDisplayText(QuestionViewModel q)
	{
		if (!string.IsNullOrWhiteSpace(q.AnswerText))
		{
			// Special handling if the AnswerText is a valid Date
			if (q.DataType.Equals("Date", StringComparison.OrdinalIgnoreCase)
				&& DateTime.TryParse(q.AnswerText, CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate))
				{
					return parsedDate.ToString("dd MMMM yyyy", CultureInfo.InvariantCulture);
				}

			return q.AnswerText!;
		}

		// For radio button or boolean types, find the selected option's text
		if ((q.DataType.Equals("radio button", StringComparison.OrdinalIgnoreCase)
			|| q.DataType.Equals("boolean", StringComparison.OrdinalIgnoreCase))
			&& !string.IsNullOrWhiteSpace(q.SelectedOption))
		{
			return q.Answers.FirstOrDefault(a => a.AnswerId == q.SelectedOption)?.AnswerText
				?? $"Enter {q.QuestionText.ToLowerInvariant()}";
		}

		// For checkboxes or lookup lists, show all selected answers
		if (q.Answers?.Any(a => a.IsSelected) == true)
		{
			return string.Join("<br/>", q.Answers
				.Where(a => a.IsSelected)
				.Select(a => a.AnswerText));
		}

		// Fallback: Prompt to "Enter" the question if no answer provided
		var label = string.IsNullOrWhiteSpace(q.ShortQuestionText) ? q.QuestionText : q.ShortQuestionText;
		return $"Enter {label.ToLowerInvariant()}";
	}

	// Generate action text (either "Change" or "Enter ...") based on the question state
	string GetActionText(QuestionViewModel q)
	{
		var label = string.IsNullOrWhiteSpace(q.ShortQuestionText) ? q.QuestionText : q.ShortQuestionText;

		return (!string.IsNullOrWhiteSpace(q.AnswerText)
			|| q.Answers.Any(a => a.IsSelected)
			|| (!string.IsNullOrWhiteSpace(q.SelectedOption) && q.Answers.Any(a => a.AnswerId == q.SelectedOption)))
			? "Change"
			: $"Enter {label.ToLowerInvariant()}";
	}

	// Check if a question is missing an answer (used to highlight errors)
	bool IsMissingAnswer(QuestionViewModel q)
	{
		return string.IsNullOrWhiteSpace(q.AnswerText)
			&& string.IsNullOrWhiteSpace(q.SelectedOption)
			&& !(q.Answers?.Any(a => a.IsSelected) ?? false);
	}
}

<partial name="_BackNavigation" model="navModel" />

<div class="govuk-grid-row">
	<div class="govuk-grid-column-two-thirds">
		<h1 class="govuk-heading-l">Review your answers</h1>
		<partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />

		@foreach (var sectionGroup in groupedSections)
		{
			<h2 class="govuk-heading-m govuk-!-margin-top-5">@sectionGroup.Key</h2>
			<dl class="govuk-summary-list govuk-!-margin-bottom-7">

				@if (sectionGroup.Key == firstSectionKey)
				{
					<div class="govuk-summary-list__row">
						<dt class="govuk-summary-list__key">IRAS ID</dt>
						<dd class="govuk-summary-list__value">@irasId</dd>
					</div>
				}

				@foreach (var question in sectionGroup)
				{
					string questionKey = GetModelKey(question);
					bool fieldHasErrors = ViewData.ModelState[questionKey]?.ValidationState == ModelValidationState.Invalid;
					string conditionalClass = !question.IsMandatory && question.Rules.Any() ? "conditional" : "";
					string parentAttributes = conditionalClass != "" ? $"data-parents=\"{string.Join(',', question.Rules.Select(r => r.ParentQuestionId))}\" data-questionid=\"{question.QuestionId}\"" : "";
					string questionText = string.IsNullOrWhiteSpace(question.ShortQuestionText) ? question.QuestionText : question.ShortQuestionText;

					<div class="@conditionalClass govuk-summary-list__row" id="@questionKey" @Html.Raw(parentAttributes)>
						<dt class="govuk-summary-list__key">@questionText</dt>

						<dd class="govuk-summary-list__value @(fieldHasErrors ? "govuk-error-summary__list" : "")">
							@if (IsMissingAnswer(question))
							{
								<a class="govuk-link" href="@Url.RouteUrl("qnc:displayquestionnaire", new { sectionId = question.SectionId, categoryId = question.Category, reviewAnswers = true })">
									@GetActionText(question)<span class="govuk-visually-hidden"> @questionText</span>
								</a>
							}
							else
							{
								<input type="hidden" id="@question.QuestionId" name="hiddenResponse" value="@GetDisplayText(question)" />
								@Html.Raw(GetDisplayText(question))
							}
						</dd>

						<dd class="govuk-summary-list__actions">
							@if (!IsMissingAnswer(question))
							{
								<a class="govuk-link" href="@Url.RouteUrl("qnc:displayquestionnaire", new { sectionId = question.SectionId, categoryId = question.Category, reviewAnswers = true })">
									@GetActionText(question)<span class="govuk-visually-hidden"> @questionText</span>
								</a>
							}
						</dd>
					</div>
				}
			</dl>
		}

		<h2 class="govuk-heading-m govuk-!-margin-top-5">Confirm project details</h2>
		<p class="govuk-body">Review your answers and complete any missing information before confirming project details.</p>

		<form method="post">
			<div class="save-buttons">
				<partial name="_SubmitButton" model="@("qnc:confirmprojectdetails", "Confirm project details", new Dictionary<string, string>())" />

				@{
					ViewBag.Style = "govuk-button govuk-button--secondary";
				}
				<partial name="_SubmitButton" model="@("app:projectoverview", "Save for later", new Dictionary<string, string> { })" />
			</div>
		</form>
	</div>
</div>