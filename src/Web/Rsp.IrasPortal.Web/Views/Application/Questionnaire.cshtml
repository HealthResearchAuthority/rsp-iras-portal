@model QuestionnaireViewModel
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Rsp.IrasPortal.Application.DTOs

@{
    ViewData["Title"] = "Questionnaire";
    var sections = Model.Questions.ToLookup(q => q.Section);
    var previousStage = TempData["td:app_previousstage"] as string;
    var currentStage = TempData["td:app_currentstage"] as string;
    var errorSummaryTitle = "Please address the following issues:";
}

<partial name="_BackNavigation" model="@("app:displayquestionnaire","Back", new Dictionary<string, string> { { "categoryId", previousStage }})" />

<partial name="_Progress" model="@(currentStage, "Initiate")" />

<form method="post">

    <partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />

    <div class="govuk-form-group questions">

        <input hidden asp-for="CurrentStage" value="@currentStage" />

        @{
            var errorKey = string.Empty;
            var validationMessage = string.Empty;
            var fieldHasErrors = false;
        }

        @foreach (var section in sections)
        {
            <govuk-fieldset class="sections">
                <govuk-fieldset-legend class="govuk-fieldset__legend--l">
                    @(section.Key)
                </govuk-fieldset-legend>

                <hr class="govuk-section-break govuk-section-break--visible" />

                @foreach (var question in section)
                {
                    var index = question.Index; //Model.Questions.IndexOf(question);

                    <input type="hidden" asp-for="Questions[index].Index" />
                    <input type="hidden" asp-for="Questions[index].QuestionId" />
                    <input type="hidden" asp-for="Questions[index].Category" />
                    <input type="hidden" asp-for="Questions[index].SectionId" />
                    <input type="hidden" asp-for="Questions[index].Section" />
                    <input type="hidden" asp-for="Questions[index].Heading" />
                    <input type="hidden" asp-for="Questions[index].QuestionText" />
                    <input type="hidden" asp-for="Questions[index].QuestionType" />
                    <input type="hidden" asp-for="Questions[index].DataType" />
                    <input type="hidden" asp-for="Questions[index].IsMandatory" checked="@question.IsMandatory" />
                    <input type="hidden" asp-for="Questions[index].IsOptional" checked="@question.IsOptional" />

                    @if (!question.IsMandatory)
                    {
                        var rules = question.Rules;

                        if (rules.Count == 0)
                        {
                            <govuk-inset-text>
                                This question is conditional:
                            </govuk-inset-text>
                        }
                        else
                        {
                            <govuk-inset-text>
                                @rules.First().Description
                            </govuk-inset-text>
                        }

                    }

                    @if (question.DataType is "Date")
                    {
                        errorKey = $"Questions[{index}].AnswerText";
                        validationMessage = "Please provide an answer for this question";
                        fieldHasErrors = ViewData.ModelState[errorKey]?.ValidationState == ModelValidationState.Invalid;

                        <div id="Questions[@index].AnswerText" class="govuk-form-group@(fieldHasErrors ? " govuk-form-group--error" : "")">

                            <h1 class="govuk-label-wrapper">
                                <label class="govuk-label govuk-label--s" for="@(question.QuestionId)_Text">
                                    @question.Heading. @question.QuestionText
                                </label>
                            </h1>

                            @if (fieldHasErrors)
                            {
                                @Html.ValidationMessage(errorKey, validationMessage, new { @class = "govuk-error-message" })
                            }

                            <div class="govuk-date-input">
                                <div class="govuk-date-input__item">
                                    <div class="govuk-form-group">
                                        @*                                         <label class="govuk-label govuk-date-input__label" for="@(question.QuestionId + "_Text")">
                            Date
                            </label> *@
                                        <div class="govuk-date-input__item">
                                            <input class="govuk-input govuk-date-input__input govuk-input--width-10" type="date" asp-for="Questions[index].AnswerText" asp-format="{0:dd-MM-yyyy}" id="@(question.QuestionId + "_Text")" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    @if (question.DataType is "Text" or "Email")
                    {
                        errorKey = $"Questions[{index}].AnswerText";
                        validationMessage = "Please provide an answer for this question";
                        fieldHasErrors = ViewData.ModelState[errorKey]?.ValidationState == ModelValidationState.Invalid;

                        <div id="Questions[@index].AnswerText" class="govuk-form-group@(fieldHasErrors ? " govuk-form-group--error" : "")">

                            <h1 class="govuk-label-wrapper">
                                <label class="govuk-label govuk-label--s" for="@(question.QuestionId)_Text">
                                    @question.Heading. @question.QuestionText
                                </label>
                            </h1>

                            @if (fieldHasErrors)
                            {
                                @Html.ValidationMessage(errorKey, validationMessage, new { @class = "govuk-error-message" })
                            }

                            @Html.TextBoxFor(model => model.Questions[index].AnswerText, new { id = question.QuestionId + "_Text", @class = "govuk-input" })
                        </div>
                    }

                    if (question.DataType is "Checkbox")
                    {
                        errorKey = $"Questions[{index}].Answers";
                        validationMessage = "Please select at least one option";
                        fieldHasErrors = ViewData.ModelState[errorKey]?.ValidationState == ModelValidationState.Invalid;

                        <div id="Questions[@index].Answers" class="govuk-form-group@(fieldHasErrors ? " govuk-form-group--error" : "")">
                            <govuk-fieldset>
                                <govuk-fieldset-legend class="govuk-fieldset__legend--s">
                                    @question.Heading. @question.QuestionText
                                </govuk-fieldset-legend>

                                @if (fieldHasErrors)
                                {
                                    @Html.ValidationMessage(errorKey, validationMessage, new { @class = "govuk-error-message" })
                                }

                                <div class="govuk-checkboxes" data-module="govuk-checkboxes">
                                    @foreach (var (answer, ansIndex) in question.Answers.Select((answer, ansIndex) => (answer, ansIndex)))
                                    {
                                        <div class="govuk-checkboxes__item">
                                            @Html.HiddenFor(model => model.Questions[index].Answers[ansIndex].AnswerId)
                                            @Html.HiddenFor(model => model.Questions[index].Answers[ansIndex].AnswerText)
                                            <input class="govuk-checkboxes__input" type="checkbox" asp-for="Questions[index].Answers[ansIndex].IsSelected" id="@(question.QuestionId)_@(answer.AnswerId)" />
                                            @Html.Label(question.QuestionId + "_" + answer.AnswerId, answer.AnswerText, new { @class = "govuk-checkboxes__label govuk-label" })
                                        </div>
                                    }
                                </div>
                            </govuk-fieldset>
                        </div>
                    }

                    if (question.DataType is "Radio button" or "Boolean")
                    {
                        errorKey = $"Questions[{index}].SelectedOption";
                        validationMessage = "Please select one option";
                        fieldHasErrors = ViewData.ModelState[errorKey]?.ValidationState == ModelValidationState.Invalid;

                        <div id="Questions[@index].SelectedOption" class="govuk-form-group@(fieldHasErrors ? " govuk-form-group--error" : "")">
                            <govuk-fieldset>
                                <govuk-fieldset-legend class="govuk-fieldset__legend--s">
                                    @question.Heading.@question.QuestionText
                                </govuk-fieldset-legend>

                                @if (fieldHasErrors)
                                {
                                    @Html.ValidationMessage(errorKey, validationMessage, new { @class = "govuk-error-message" })
                                }

                                <div class="govuk-radios" data-module="govuk-radios">
                                    @foreach (var (answer, ansIndex) in question.Answers.Select((answer, ansIndex) => (answer, ansIndex)))
                                    {
                                        <div class="govuk-radios__item">
                                            @Html.HiddenFor(model => model.Questions[index].Answers[ansIndex].AnswerId)
                                            @Html.HiddenFor(model => model.Questions[index].Answers[ansIndex].AnswerText)
                                            @Html.RadioButtonFor(model => model.Questions[index].SelectedOption, answer.AnswerId, new { id = question.QuestionId + "_" + answer.AnswerId, @class = "govuk-radios__input" })
                                            @Html.Label(question.QuestionId + "_" + answer.AnswerId, answer.AnswerText, new { @class = "govuk-radios__label govuk-label" })
                                        </div>
                                    }
                                </div>
                            </govuk-fieldset>
                        </div>
                    }
                }
            </govuk-fieldset>
        }
    </div>

    <partial name="_SubmitButton" model="@("app:submitanswers","Continue", new Dictionary<string, string>())" />
</form>