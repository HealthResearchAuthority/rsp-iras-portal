@using System.Text.Json
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.FeatureManagement
@using Rsp.IrasPortal.Application.Constants
@using Rsp.IrasPortal.Application.DTOs
@using Rsp.IrasPortal.Web.TagHelpers
@using System.Globalization
@model ModificationAddDocumentDetailsViewModel
@inject IFeatureManager featureManager

@{
	(string routeName, string linkText, Dictionary<string, string> routeValues)? navModel = null;
	ViewBag.Title = $"Add document details for {Model.FileName}";
	var errorSummaryTitle = "There is a problem";
}
@if (await featureManager.IsEnabledAsync(Features.ProgressiveEnhancement))
{
	<script src="~/lib/jquery/dist/jquery.js"></script>

	// Collect all rules for conditional questions
	var conditionalRules = Model.Questionnaire.GetConditionalRules();

	<script>
		$(document).ready(function () {
		const conditionalRules = @Html.Raw(JsonSerializer.Serialize(conditionalRules));

		// Loop through each rule and store it individually by QuestionId
		conditionalRules.forEach(rule => {
		sessionStorage.setItem(rule.QuestionId, JSON.stringify(rule.Rules));
		});
		});
	</script>

	<script src="~/js/questionnaire.js"></script>
	<script src="~/js/rules.js"></script>
}

@{
	if (Model.ReviewAnswers)
	{
		navModel = ("mqc:submitapplication", "Back", new()
{
			{ "projectRecordId", "projectRecordId" }
		});
	}
	else if (!string.IsNullOrEmpty("previousStage"))
	{
		// If there is a previous stage, navigate to that stage in the questionnaire
		navModel = ("mqc:displayquestionnaire", "Back", new()
{
			{ "categoryId", "previousCategory" },
			{ "sectionId", "previousStage" }
		});
	}
	else
	{
		// back to the area of changes view as that's where the jouney started from
		navModel = ("pmc:areaofchange", "Back", new());
	}
}

@if (navModel != null)
{
	@* @section is added for the back button, so that we can render something below the back button
        and before the RenderBody() in the _Layout.cshtml. As RenderBody() renders anything that is not within
        the named section *@
	@section BackNavigation {
	<partial name="_BackNavigation" model="navModel.Value" />
	}
}
<div class="govuk-grid-row">
	<div class="govuk-grid-column-two-thirds">
		<form method="post">
			<h1 class="govuk-heading-l">
				Add document details for @Model.FileName
			</h1>

			<div class="govuk-summary-list">
				<div class="govuk-summary-list__row">
					<dt class="govuk-summary-list__key">
						<a href="@Model.DocumentStoragePath" target="_blank">@Model.FileName</a>
					</dt>
					<dd class="govuk-summary-list__value">@Model.FileSize</dd>
					<dd class="govuk-summary-list__actions">
						<a asp-action="DeleteDocument"
						   asp-route-id="@Model.DocumentId"
						   class="govuk-link">Delete</a>
					</dd>
				</div>
			</div>

			<partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />

			<govuk-fieldset class="sections">
				<partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />
				
				<input type="hidden" asp-for="@Model.ShortTitle" />
				<input type="hidden" asp-for="@Model.IrasId" />
				<input type="hidden" asp-for="@Model.ModificationIdentifier" />
				<input type="hidden" asp-for="@Model.DocumentId" />
				<input type="hidden" asp-for="@Model.FileName" />
				<input type="hidden" asp-for="@Model.FileSize" />
				<input type="hidden" asp-for="@Model.DocumentStoragePath" />

				@foreach (var question in Model.Questionnaire.Questions)
				{
					var index = question.Index;

					<input type="hidden" asp-for="Questionnaire.Questions[index].Index" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].QuestionId" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].Category" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].SectionId" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].Section" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].Heading" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].QuestionText" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].ShortQuestionText" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].QuestionType" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].DataType" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].IsMandatory" checked="@question.IsMandatory" />
					<input type="hidden" asp-for="Questionnaire.Questions[index].IsOptional" checked="@question.IsOptional" />

					if (!question.IsMandatory)
					{
						if (question.Rules.Count == 0)
						{
							<div class="govuk-inset-text">
								This question is conditional:
							</div>
						}
					}

					var types = (question.QuestionType.ToLower(), question.DataType.ToLower());

					ViewBag.Index = index;

					// this will be used in the template
					var templateName = types switch
					{
						("date", "date") => "DateTemplate",
						("text", "text" or "email") => "TextTemplate",
						("look-up list", "checkbox") => "CheckboxTemplate",
						("look-up list", "radio button") => "RadioButtonTemplate",
						("boolean", "boolean") => "RadioButtonTemplate",
						("look-up list", "dropdown") => "DropdownTemplate",
						_ => string.Empty
					};

					if (!string.IsNullOrWhiteSpace(templateName))
					{
						// plese note the @ is necessary before Html so that Template is rendered, otherwise it won't render
						@Html.EditorFor(m => m.Questionnaire, $"~/Views/ProjectModification/EditorTemplates/{templateName}.cshtml", ViewData)
					}
				}
			</govuk-fieldset>
			<div class="save-buttons">
				@if (!Model.ReviewAnswers)
				{
					<partial name="_SubmitButton" model="@("pmc:savedocumentdetails", "Save and continue", new Dictionary<string, string> { { "saveAndContinue", bool.TrueString } })" />

					ViewBag.Style = "govuk-button govuk-button--secondary";
					<partial name="_SubmitButton" model="@("mqc:saveresponses", "Save for later", new Dictionary<string, string> { { "saveForLater", bool.TrueString } })" />
				}
				else
				{
					<partial name="_SubmitButton" model="@("mqc:saveresponses", "Save changes", new Dictionary<string, string> { { "submit", bool.TrueString } })" />
				}
			</div>

		</form>
	</div>
</div>
<script>
	$(document).on("change", "select[name='Questions[0].SelectedOption']", function () {
		$("div.govuk-form-group.conditional").removeAttr("style");
	});
</script>
