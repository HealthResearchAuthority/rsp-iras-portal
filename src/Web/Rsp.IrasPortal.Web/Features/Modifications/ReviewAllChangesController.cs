using Microsoft.AspNetCore.Mvc;
using Rsp.IrasPortal.Application.Constants;
using Rsp.IrasPortal.Application.Services;
using Rsp.IrasPortal.Web.Extensions;
using Rsp.IrasPortal.Web.Features.Modifications.Helpers;
using Rsp.IrasPortal.Web.Features.Modifications.Models;
using Rsp.IrasPortal.Web.Helpers;

namespace Rsp.IrasPortal.Web.Features.Modifications;

[Route("/modifications/[action]", Name = "pmc:[action]")]
public class ReviewAllChangesController
(
    IProjectModificationsService projectModificationsService,
    ICmsQuestionsetService cmsQuestionsetService,
    IRespondentService respondentService
) : ModificationsControllerBase(respondentService, projectModificationsService, cmsQuestionsetService)
{
    private const string SponsorDetailsSectionId = "pm-sponsor-reference";
    private readonly IRespondentService _respondentService = respondentService;

    [HttpGet]
    public async Task<IActionResult> ReviewAllChanges(string projectRecordId, string irasId, string shortTitle, Guid projectModificationId)
    {
        // Fetch the modification by its identifier
        var (modificationResult, model) = await GetModificationDetails(projectModificationId, irasId, shortTitle, projectRecordId);

        // Short-circuit with a service error if the call failed
        if (modificationResult is not null)
        {
            return modificationResult;
        }

        var modification = model!;

        // These fields are currently set to fixed values (could be driven by data in future)
        modification.ModificationType = "Minor modification";
        modification.Category = "{A > B/C > B > C > New site > N/A}";
        modification.ReviewType = "No review required";

        // Persist the modification identifier in TempData for subsequent requests/pages
        TempData[TempDataKeys.ProjectModification.ProjectModificationIdentifier] = modification.ModificationIdentifier;
        TempData[TempDataKeys.ProjectModification.ProjectModificationId] = modification.ModificationId;

        var (changesResult, initialQuestions, modificationChanges) = await GetModificationChanges(modification);

        if (changesResult is not null)
        {
            return changesResult;
        }

        foreach (var change in modificationChanges!.OrderByDescending(c => c.CreatedDate))
        {
            var areaOfChange = initialQuestions!.AreasOfChange.Find(area => area.AutoGeneratedId == change.AreaOfChange);

            // TODO: Include the project documents once the decision is made on how to include these
            // exclude project documents for now as it can't be displayed in the same format
            if (areaOfChange?.OptionName?.Equals("project documents", StringComparison.OrdinalIgnoreCase) is true)
            {
                continue;
            }

            var specificAreaOfChange = areaOfChange?.SpecificAreasOfChange.Find(area => area.AutoGeneratedId == change.SpecificAreaOfChange);

            // get the questions for the change
            var questionSetServiceResponse = await cmsQuestionsetService.GetModificationsJourney(change.SpecificAreaOfChange);

            // get the responent answers for the change
            var respondentServiceResponse = await _respondentService.GetModificationChangeAnswers(change.Id, projectRecordId);

            var respondentAnswers = respondentServiceResponse.Content!;

            // convert the questions response to QuestionnaireViewModel
            var questionnaire = QuestionsetHelpers.BuildQuestionnaireViewModel(questionSetServiceResponse.Content!);

            // Apply answers and trim questions using shared helper
            questionnaire.UpdateWithRespondentAnswers(respondentAnswers);

            var questions = questionnaire.Questions;

            var changeModel = new ModificationChangeModel
            {
                ModificationChangeId = change.Id,
                ModificationType = "Minor Modification",
                Category = "A > B/C",
                ReviewType = "No review required",
                AreaOfChangeName = areaOfChange?.OptionName ?? string.Empty,
                SpecificChangeName = specificAreaOfChange?.OptionName ?? string.Empty,
                SpecificAreaOfChangeId = specificAreaOfChange?.AutoGeneratedId ?? string.Empty,
                ChangeStatus = change.Status,
                Questions = questions
            };

            // show surfacing questions
            ModificationHelpers.ShowSurfacingQuestion(questions, changeModel, nameof(ReviewAllChanges));

            // remove all the conditional questions without answers, these must have been
            // validated on the previous screen
            questions.RemoveAll(q => !(q.IsMandatory || q.IsOptional) && q.IsMissingAnswer());

            modification.ModificationChanges.Add(changeModel);
        }

        var sponsorDetailsQuestionsResponse = await cmsQuestionsetService.GetModificationQuestionSet(SponsorDetailsSectionId);

        // get the responent answers for the sponsor details
        var sponsorDetailsResponse = await _respondentService.GetModificationAnswers(projectModificationId, projectRecordId);

        var sponsorDetailsAnswers = sponsorDetailsResponse.Content!;

        // convert the questions response to QuestionnaireViewModel
        var sponsorDetailsQuestionnaire = QuestionsetHelpers.BuildQuestionnaireViewModel(sponsorDetailsQuestionsResponse.Content!);

        // Apply answers questions using shared helper
        sponsorDetailsQuestionnaire.UpdateWithRespondentAnswers(sponsorDetailsAnswers);

        modification.SponsorDetails = sponsorDetailsQuestionnaire.Questions;

        // Render the details view
        return View(modification);
    }

    [HttpPost]
    public async Task<IActionResult> SendModificationToSponsor(string projectRecordId, Guid projectModificationId)
    {
        TempData[TempDataKeys.ProjectRecordId] = projectRecordId;

        var updateResponse = await projectModificationsService.UpdateModificationStatus(projectModificationId, ModificationStatus.InSponsorReview);

        if (!updateResponse.IsSuccessStatusCode)
        {
            return this.ServiceError(updateResponse);
        }

        return View("ModificationSentToSponsor");
    }
}