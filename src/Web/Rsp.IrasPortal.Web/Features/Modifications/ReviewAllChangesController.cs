using System.Net;
using Microsoft.AspNetCore.Mvc;
using Rsp.IrasPortal.Application.Constants;
using Rsp.IrasPortal.Application.Responses;
using Rsp.IrasPortal.Application.Services;
using Rsp.IrasPortal.Web.Extensions;
using Rsp.IrasPortal.Web.Features.Modifications.Helpers;
using Rsp.IrasPortal.Web.Features.Modifications.Models;
using Rsp.IrasPortal.Web.Helpers;

namespace Rsp.IrasPortal.Web.Features.Modifications;

[Route("/modifications/[action]", Name = "pmc:[action]")]
public class ReviewAllChangesController
(
    IProjectModificationsService projectModificationsService,
    ICmsQuestionsetService cmsQuestionsetService,
    IRespondentService respondentService
) : Controller
{
    private const string SponsorDetailsSectionId = "pm-sponsor-reference";

    [HttpGet]
    public async Task<IActionResult> ReviewAllChanges(string projectRecordId, string irasId, string shortTitle, Guid projectModificationId)
    {
        // Fetch the modification by its identifier
        var modificationResponse = await projectModificationsService.GetModificationsByIds([projectModificationId.ToString()]);

        // Short-circuit with a service error if the call failed
        if (!modificationResponse.IsSuccessStatusCode)
        {
            return this.ServiceError(modificationResponse);
        }

        if (modificationResponse.Content?.Modifications.Any() is false)
        {
            return this.ServiceError(new ServiceResponse
            {
                StatusCode = HttpStatusCode.BadRequest,
                Error = $"Error retrieving the modification for project record: {projectRecordId} modificationId: {projectModificationId.ToString()}",
            });
        }

        // Select the first (and only) modification result
        var modification = modificationResponse.Content!.Modifications.First();

        // Build the base view model with project metadata
        var viewModel = new ModificationDetailsViewModel
        {
            ModificationId = modification.Id,
            IrasId = irasId,
            ShortTitle = shortTitle,
            ModificationIdentifier = modification.ModificationId,
            Status = modification.Status,
            ProjectRecordId = projectRecordId
        };

        // Persist the modification identifier in TempData for subsequent requests/pages
        TempData[TempDataKeys.ProjectModification.ProjectModificationIdentifier] = modification.ModificationId;
        TempData[TempDataKeys.ProjectModification.ProjectModificationId] = modification.Id;

        // Retrieve all changes related to this modification
        var modificationsResponse = await projectModificationsService.GetModificationChanges(Guid.Parse(viewModel.ModificationId));

        if (!modificationsResponse.IsSuccessStatusCode)
        {
            return this.ServiceError(modificationsResponse);
        }

        // These fields are currently set to fixed values (could be driven by data in future)
        viewModel.ModificationType = "Minor modification";
        viewModel.Category = "{A > B/C > B > C > New site > N/A}";
        viewModel.ReviewType = "No review required";

        // Load initial questions to resolve display names for areas of change
        var initialQuestionsResponse = await cmsQuestionsetService.GetInitialModificationQuestions();

        if (!initialQuestionsResponse.IsSuccessStatusCode)
        {
            return this.ServiceError(initialQuestionsResponse);
        }

        var initialQuestions = initialQuestionsResponse.Content!;

        // modification changes returned from the service
        var modificationChanges = modificationsResponse.Content!;

        foreach (var change in modificationChanges)
        {
            var areaOfChange = initialQuestions.AreasOfChange.Find(area => area.AutoGeneratedId == change.AreaOfChange);

            // TODO: Include the project documents once the decision is made on how to include these
            // exclude project documents for now as it can't be displayed in the same format
            if (areaOfChange?.OptionName?.Equals("project documents", StringComparison.OrdinalIgnoreCase) is true)
            {
                continue;
            }

            var specificAreaOfChange = areaOfChange?.SpecificAreasOfChange.Find(area => area.AutoGeneratedId == change.SpecificAreaOfChange);

            // get the questions for the change
            var questionSetServiceResponse = await cmsQuestionsetService.GetModificationsJourney(change.SpecificAreaOfChange);

            // get the responent answers for the change
            var respondentServiceResponse = await respondentService.GetModificationChangeAnswers(change.Id, projectRecordId);

            var respondentAnswers = respondentServiceResponse.Content!;

            // convert the questions response to QuestionnaireViewModel
            var questionnaire = QuestionsetHelpers.BuildQuestionnaireViewModel(questionSetServiceResponse.Content!);

            // Apply answers and trim questions using shared helper
            var (surfacingQuestion, showSurfacingQuestion) = ModificationHelpers.ApplyRespondentAnswersAndTrim(questionnaire, respondentAnswers, nameof(ReviewAllChanges));

            var questions = questionnaire.Questions;

            var changeModel = new ModificationChangeModel
            {
                ModificationChangeId = change.Id,
                ModificationType = "Minor Modification",
                Category = "A > B/C",
                ReviewType = "No review required",
                AreaOfChangeName = areaOfChange?.OptionName ?? string.Empty,
                SpecificChangeName = specificAreaOfChange?.OptionName ?? string.Empty,
                SpecificAreaOfChangeId = specificAreaOfChange?.AutoGeneratedId ?? string.Empty,
                ChangeStatus = change.Status,
                Questions = questions,
                SpecificChangeAnswer = showSurfacingQuestion ? surfacingQuestion!.GetDisplayText(false) : string.Empty
            };

            viewModel.ModificationChanges.Add(changeModel);
        }

        var sponsorDetailsQuestionsResponse = await cmsQuestionsetService.GetModificationQuestionSet(SponsorDetailsSectionId);

        // get the responent answers for the sponsor details
        var sponsorDetailsResponse = await respondentService.GetModificationAnswers(projectModificationId, projectRecordId);

        var sponsorDetailsAnswers = sponsorDetailsResponse.Content!;

        // convert the questions response to QuestionnaireViewModel
        var sponsorDetailsQuestionnaire = QuestionsetHelpers.BuildQuestionnaireViewModel(sponsorDetailsQuestionsResponse.Content!);

        // Apply answers and trim questions using shared helper
        ModificationHelpers.ApplyRespondentAnswersAndTrim(sponsorDetailsQuestionnaire, sponsorDetailsAnswers);

        var sponsorDetailsQuestions = sponsorDetailsQuestionnaire.Questions;

        viewModel.SponsorDetails = sponsorDetailsQuestions;

        // Render the details view
        return View(viewModel);
    }

    [HttpPost]
    public async Task<IActionResult> SendModificationToSponsor(string projectRecordId, Guid projectModificationId)
    {
        TempData[TempDataKeys.ProjectRecordId] = projectRecordId;

        var updateResponse = await projectModificationsService.UpdateModificationStatus(projectModificationId, "In sponsor review");

        if (!updateResponse.IsSuccessStatusCode)
        {
            return this.ServiceError(updateResponse);
        }

        return View("ModificationSentToSponsor");
    }
}