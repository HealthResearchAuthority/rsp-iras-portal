@using System.Text.Json
@using System.Globalization
@using Microsoft.AspNetCore.Mvc.ModelBinding
@using Microsoft.FeatureManagement
@using Rsp.IrasPortal.Application.Constants
@using Rsp.IrasPortal.Application.DTOs
@using Rsp.IrasPortal.Application.Services
@using Rsp.IrasPortal.Web.Extensions
@inject ICmsQuestionsetService cmsQuestionsetService

@model QuestionnaireViewModel
@{
    var prefix = ViewData.ModelState.IsValid ? "" : "Error - ";

    ViewBag.Title = $"{prefix}Review changes";

    var errorSummaryTitle = "There is a problem";

    var modification = TempData.PopulateBaseProjectModificationProperties(new BaseProjectModificationViewModel());

    var projectRecordId = modification.ProjectRecordId;

    var specificArea = modification.SpecificAreaOfChange;

    // Group questions by their Section and order them by Sequence
    var groupedSections = Model.Questions
        .OrderBy(q => q.SectionSequence)
        .ThenBy(q => q.Sequence)
        .GroupBy(q => q.SectionId)
        .ToList();

    var navigation = JsonSerializer.Deserialize<NavigationDto>((TempData.Peek(TempDataKeys.ProjectModificationChange.Navigation) as string)!);

    TempData[TempDataKeys.ProjectModificationChange.ReviewChanges] = true;

    <script src="~/lib/jquery/dist/jquery.js"></script>

    // Collect all rules for conditional questions
    var conditionalRules = Model.GetConditionalRules();
    var parentQuestionAnswers = Model.GetParentQuestionAnswers();

    <script>
        $(document).ready(function () {
        const conditionalRules = @Html.Raw(JsonSerializer.Serialize(conditionalRules));

        // Loop through each rule and store it individually by QuestionId
         conditionalRules.forEach(rule => {
            sessionStorage.setItem(rule.QuestionId, JSON.stringify(rule.Rules));
         });

         const parentAnswers = @Html.Raw(JsonSerializer.Serialize(parentQuestionAnswers));

        // Loop through each rule and store it individually by QuestionId
        parentAnswers.forEach(parent => {
            sessionStorage.setItem('A_'+parent.QuestionId, JSON.stringify(parent.Answers));
         });
    });
    </script>

    <script src="~/js/questionnaire.js"></script>
    <script src="~/js/rules.js"></script>
}

@* @section is added for the back button, so that we can render something below the back button
    and before the RenderBody() in the _Layout.cshtml. As RenderBody() renders anything that is not within
    the named section *@
@section BackNavigation {
    @*<partial name="_BackNavigation" model="navModel" />*@
    <vc:back-navigation navigation-dto="@navigation"
                        specific-area-of-change-id="@modification.SpecificAreaOfChangeId"
                        project-record-id="@projectRecordId"
                        questionnaire="Model"
                        back-from-review="true" />
}

<partial name="_ValidationSummary" model="(ViewData.ModelState, errorSummaryTitle)" />

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l">Review changes</h1>

        <partial name="_ProjectModificationSummary" />

        <h2 class="govuk-heading-m govuk-!-margin-top-5">
            Ranking of change
        </h2>

        <partial name="RankingOfChange.cshtml" />

        <h2 class="govuk-heading-m govuk-!-margin-top-5">
            @specificArea
        </h2>

        @foreach (var sectionGroup in groupedSections)
        {

            @*<h2 class="govuk-heading-m govuk-!-margin-top-5">@sectionGroup.Key</h2>*@
            <dl class="govuk-summary-list govuk-!-margin-bottom-7">

                @{
                    var questionset = await cmsQuestionsetService.GetModificationQuestionSet(sectionGroup.Key);
                    var section = questionset.Content!.Sections.First(s => s.Id == sectionGroup.Key);
                }

                @foreach (var question in sectionGroup)
                {
                    string questionKey = question.GetModelKey();
                    bool fieldHasErrors = ViewData.ModelState[questionKey]?.ValidationState == ModelValidationState.Invalid;
                    string conditionalClass = !question.IsMandatory && question.Rules.Any() ? "conditional" : "";
                    string parentAttributes = conditionalClass != "" ? $"data-parents=\"{string.Join(',', question.Rules.Select(r => r.ParentQuestionId))}\" data-questionid=\"{question.QuestionId}\"" : "";
                    string questionText = string.IsNullOrWhiteSpace(question.ShortQuestionText) ? question.QuestionText : question.ShortQuestionText;

                    <div class="@conditionalClass govuk-summary-list__row" id="@questionKey" @Html.Raw(parentAttributes)>
                        <dt class="govuk-summary-list__key">@questionText</dt>

                        <dd class="govuk-summary-list__value @(fieldHasErrors ? "govuk-error-summary__list" : "")">
                            @if (question.IsMissingAnswer())
                            {
                                <a class="govuk-link" href="@Url.RouteUrl($"pmc:{section.StaticViewName}", new { projectRecordId, categoryId = section.CategoryId, sectionId = question.SectionId, reviewAnswers = true })">
                                    @question.GetActionText()<span class="govuk-visually-hidden"> @questionText</span>
                                </a>
                            }
                            else
                            {
                                <input type="hidden" id="@question.QuestionId" name="hiddenResponse" value="@question.GetDisplayText()" />
                                @Html.Raw(question.GetDisplayText())
                            }
                        </dd>

                        <dd class="govuk-summary-list__actions">
                            @if (!question.IsMissingAnswer())
                            {
                                <a class="govuk-link" href="@Url.RouteUrl($"pmc:{section.StaticViewName}", new { projectRecordId, categoryId = section.CategoryId, sectionId = question.SectionId, reviewAnswers = true })">
                                    @question.GetActionText()<span class="govuk-visually-hidden"> @questionText</span>
                                </a>
                            }
                        </dd>
                    </div>
                }
            </dl>
        }

        <h2 class="govuk-heading-m govuk-!-margin-top-5">
            Supporting documents
        </h2>

        <dl class="govuk-summary-list govuk-!-margin-bottom-7">

            <div class="govuk-summary-list__row" id="supporting-documents">
                <dt class="govuk-summary-list__key">
                    Supporting documents
                </dt>
                <dd class="govuk-summary-list__value">
                    GP-Patient-participation-1.5.doc
                </dd>
                <dd class="govuk-summary-list__actions">

                    <a class="govuk-link" asp-route="pmc:projectdocument">
                        Change
                    </a>
                </dd>
            </div>
        </dl>

        <form method="post">
            <div class="save-buttons">
                <partial name="_SubmitButton" model="@("pmc:confirmmodificationchanges", "Save and continue" , new Dictionary<string, string> { ["projectRecordId"] = projectRecordId })" />

                @{
                    ViewBag.Style = "govuk-button govuk-button--secondary";
                }

                <partial name="_SubmitButton" model="@("pov:postapproval", "Save for later", new Dictionary<string, string> { ["projectRecordId"] = projectRecordId })" />
            </div>
        </form>
    </div>
</div>